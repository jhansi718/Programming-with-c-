Program.6.1 
Develop a C++ program that demonstrates how to overload both unary and binary operators using 
member functions. 

Program:. 
#include<iostream> 
using namespace std; 
class complex{ 
private: 
 
public: 
float real,image; 
 
 
complex(float r=0,float i=0):real(r),image(i){ } 
void display() 
{ 
cout<<real<<"+"<<image<<"i"<<endl; 
} 
complex operator-() 
{ 
return complex(-real,-image); 
} 
complex operator++() 
{ 
++real; 
++image; 
return *this; 
} 
complex operator+(const complex& obj){ 
return complex(real+obj.real,image+obj.image); 
} 
complex operator-(const complex& obj){ 
return complex(real-obj.real,image-obj.image); 
} 
}; 
int main(){ 
complex c1(3,4),c2(1,2),c3; 
cout<<”Roll No:24B11AI291”<<endl; 
cout<<"original complex numbers:"<<endl; 
cout<<"c1=";c1.display(); 
cout<<"c2=";c2.display(); 
c3=-c1; 
cout<<"\nAfter unary - on c1:"<<endl; cout<<"c3=";c3.display(); 
++c1; 
cout<<"\n After unary ++ on c1:"<<endl; 
cout<<"c1=";c1.display(); 
c3=c1+c2; 
cout<<"\nAfter c1+c2:"<<endl; cout<<"c3=";c3.display(); 
c3=c1-c2; 
cout<<"\nAfter c1-c2:"<<endl; 
cout<<"c3="; 
c3.display(); 
return 0; 
} 
 
 

 
 
Program 6.2: 
Create a C++ program to demonstrate operator overloading for unary and binary operators using 
friend functions
Program:. 
#include <iostream> using namespace std; 
class complex { private: 
float real, image; 
public: 
complex(float r = 0, float i = 0) : real(r), image(i) {} 
void display() const { 
cout << real << "+" << image << "i" << endl; 
} 
friend complex operator-(const complex& c); 
friend complex operator++(complex& c); 
friend complex operator+(const complex& a, const complex& b); 
friend complex operator-(const complex& a, const complex& b); 
}; 
complex operator-(const complex& c) { return complex(-c.real, -c.image); 
} 
complex operator++(complex& c) { 
++c.real; 
++c.image; return c; 
} 
complex operator+(const complex& a, const complex& b) { return complex(a.real + b.real, a.image + 
b.image); 
} 
complex operator-(const complex& a, const complex& b) { return complex(a.real - b.real, a.image - 
b.image); 
} 
int main() { 
complex c1(3, 4), c2(1, 2), c3; 
cout<<”Roll No:24B11AI291”<<endl; 
cout << "Original complex numbers:" << endl; cout << "c1 = "; c1.display(); 
cout << "c2 = "; c2.display(); 
c3 = -c1; 
cout << "\nAfter unary - on c1:" << endl; 
cout << "c3 = "; 
c3.display(); 
++c1; 
cout << "\nAfter unary ++ on c1:" << endl; 
cout << "c1 = "; c1.display(); 
 
c3 = c1 + c2; 
cout << "\nAfter c1 + c2:" << endl; cout << "c3 = "; c3.display(); 
 
 
c3 = c1 - c2; 
cout << "\nAfter c1 - c2:" << endl; cout << "c3 = "; c3.display(); 
           
 
